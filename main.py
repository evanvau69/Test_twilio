import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
import sqlite3
from datetime import datetime, timedelta
import pytz

# ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
ADMIN_CHAT_ID = "6165060012"  # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¶‡¶ø‡¶® ‡¶è‡¶ñ‡¶æ‡¶®‡ßá
BOT_TOKEN = "7938926278:AAFRUMnq968-gcd4z9mV04cGGyu2v2X6bvE"  # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¶‡¶ø‡¶® ‡¶è‡¶ñ‡¶æ‡¶®‡ßá

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def init_db():
    conn = sqlite3.connect('subscription_bot.db')
    cursor = conn.cursor()
    
    # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        subscription_type TEXT,
        subscription_start TEXT,
        subscription_end TEXT,
        free_trial_used INTEGER DEFAULT 0
    )
    ''')
    
    # ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS payment_requests (
        request_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        plan TEXT,
        amount REAL,
        status TEXT DEFAULT 'pending',
        request_time TEXT DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    conn.commit()
    conn.close()

def get_user(user_id):
    conn = sqlite3.connect('subscription_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

def update_user(user_id, **kwargs):
    conn = sqlite3.connect('subscription_bot.db')
    cursor = conn.cursor()
    
    set_clause = ', '.join([f"{key} = ?" for key in kwargs.keys()])
    values = list(kwargs.values()) + [user_id]
    
    cursor.execute(f'''
    UPDATE users 
    SET {set_clause}
    WHERE user_id = ?
    ''', values)
    
    conn.commit()
    conn.close()

def add_payment_request(user_id, plan, amount):
    conn = sqlite3.connect('subscription_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT INTO payment_requests (user_id, plan, amount)
    VALUES (?, ?, ?)
    ''', (user_id, plan, amount))
    
    conn.commit()
    request_id = cursor.lastrowid
    conn.close()
    return request_id

def update_payment_status(request_id, status):
    conn = sqlite3.connect('subscription_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    UPDATE payment_requests
    SET status = ?
    WHERE request_id = ?
    ''', (status, request_id))
    
    conn.commit()
    conn.close()

# ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶ö‡ßá‡¶ï ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def has_active_subscription(user_id):
    user = get_user(user_id)
    if user and user[5]:  # subscription_end
        now = datetime.now(pytz.utc)
        subscription_end = datetime.strptime(user[5], '%Y-%m-%d %H:%M:%S').replace(tzinfo=pytz.utc)
        return subscription_end > now
    return False

# ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    user_id = user.id
    username = user.username or "N/A"
    first_name = user.first_name or ""
    last_name = user.last_name or ""
    full_name = f"{first_name} {last_name}".strip()
    
    # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°/‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
    conn = sqlite3.connect('subscription_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
    INSERT OR IGNORE INTO users (user_id, username, first_name, last_name)
    VALUES (?, ?, ?, ?)
    ''', (user_id, username, first_name, last_name))
    conn.commit()
    conn.close()
    
    if has_active_subscription(user_id):
        update.message.reply_text(
            f'‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ {full_name} ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Subscription ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶Ü‡¶õ‡ßá ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¶‡¶ø‡ßü‡ßá Login ‡¶ï‡¶∞‡ßÅ‡¶®\n'
            'Login ‡¶ï‡¶∞‡¶§‡ßá /Login ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®'
        )
    else:
        keyboard = [
            [InlineKeyboardButton("‚¨ú 1 Hour - Free üå∏", callback_data='free_trial')],
            [InlineKeyboardButton("üî¥ 1 Day - 2$", callback_data='1_day')],
            [InlineKeyboardButton("üü† 7 Day - 10$", callback_data='7_day')],
            [InlineKeyboardButton("üü° 15 Day - 15$", callback_data='15_day')],
            [InlineKeyboardButton("üü¢ 30 Day - 20$", callback_data='30_day')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(
            '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Subscriptions ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶®‡ßá‡¶á ‚ôªÔ∏è ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ Subscription Choose ‡¶ï‡¶∞‡ßÅ‡¶® ‚úÖ',
            reply_markup=reply_markup
        )

# ‡¶¨‡¶æ‡¶ü‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    user = query.from_user
    user_id = user.id
    username = user.username or "N/A"
    first_name = user.first_name or ""
    last_name = user.last_name or ""
    full_name = f"{first_name} {last_name}".strip()
    
    if query.data == 'free_trial':
        # ‡¶´‡ßç‡¶∞‡¶ø ‡¶ü‡ßç‡¶∞‡¶æ‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶≤‡¶ú‡¶ø‡¶ï
        user_data = get_user(user_id)
        if user_data and user_data[7]:  # free_trial_used
            query.edit_message_text(text="‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶´‡ßç‡¶∞‡¶ø ‡¶ü‡ßç‡¶∞‡¶æ‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ú ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        else:
            # ‡¶´‡ßç‡¶∞‡¶ø ‡¶ü‡ßç‡¶∞‡¶æ‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü‡¶ø‡¶≠‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
            subscription_end = datetime.now() + timedelta(hours=1)
            update_user(
                user_id,
                subscription_type='1 Hour Free',
                subscription_start=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                subscription_end=subscription_end.strftime('%Y-%m-%d %H:%M:%S'),
                free_trial_used=1
            )
            query.edit_message_text(
                text=f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ 1 ‡¶ò‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶´‡ßç‡¶∞‡¶ø ‡¶ü‡ßç‡¶∞‡¶æ‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! "
                     f"{subscription_end.strftime('%Y-%m-%d %H:%M:%S')} ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§"
            )
    
    else:
        # ‡¶™‡ßá‡¶á‡¶° ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ú ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç
        plans = {
            '1_day': {'text': '1 Day', 'amount': 2},
            '7_day': {'text': '7 Days', 'amount': 10},
            '15_day': {'text': '15 Days', 'amount': 15},
            '30_day': {'text': '30 Days', 'amount': 20}
        }
        
        plan = plans.get(query.data)
        if plan:
            # ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
            request_id = add_payment_request(user_id, plan['text'], plan['amount'])
            
            # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡¶∂‡¶® ‡¶¶‡¶ø‡¶®
            message = f'''
Please send ${plan['amount']} to Binance Pay ID: 
‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶Æ‡¶æ‡¶® ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá Admin ‡¶è‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶∏‡ßç‡¶ï‡¶ø‡¶®‡¶∂‡¶∞‡ßç‡¶ü ‡¶Ö‡¶•‡¶¨‡¶æ transaction ID ‡¶¶‡¶ø‡¶® @Mr_Evan3490

Your payment details:
‚ùÑÔ∏è Name : {full_name}
üÜî User ID: `{user_id}` (‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®)
üë§ Username: @{username}
üìã Plan: {plan['text']}
üí∞ Amount: ${plan['amount']}
'''
            query.edit_message_text(text=message, parse_mode='Markdown')
            
            # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®
            admin_message = f'''
{full_name} {plan['text']} ‡¶∏‡¶Æ‡ßü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Subscription ‡¶®‡¶ø‡¶§‡ßá ‡¶ö‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡•§

üîÜ User Name : {full_name}
üîÜ User ID : {user_id}
üîÜ Username : @{username}
üîÜ Plan : {plan['text']}
üîÜ Amount : ${plan['amount']}
'''
            keyboard = [
                [
                    InlineKeyboardButton("Approve ‚úÖ", callback_data=f'approve_{request_id}'),
                    InlineKeyboardButton("Cancel ‚ùå", callback_data=f'cancel_{request_id}')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=admin_message,
                reply_markup=reply_markup
            )

# ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
def admin_action_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    data = query.data.split('_')
    action = data[0]
    request_id = int(data[1])
    
    # ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶°‡¶ø‡¶ü‡ßá‡¶á‡¶≤‡¶∏ ‡¶®‡¶ø‡¶®
    conn = sqlite3.connect('subscription_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
    SELECT pr.*, u.first_name, u.last_name, u.username 
    FROM payment_requests pr
    JOIN users u ON pr.user_id = u.user_id
    WHERE pr.request_id = ?
    ''', (request_id,))
    payment_request = cursor.fetchone()
    
    if not payment_request:
        query.edit_message_text(text="Error: Payment request not found")
        conn.close()
        return
    
    user_id = payment_request[1]
    plan = payment_request[2]
    amount = payment_request[3]
    first_name = payment_request[5] or ""
    last_name = payment_request[6] or ""
    full_name = f"{first_name} {last_name}".strip()
    username = payment_request[7] or "N/A"
    
    if action == 'approve':
        # ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü‡¶ø‡¶≠‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
        days = int(plan.split()[0])
        subscription_end = datetime.now() + timedelta(days=days)
        
        cursor.execute('''
        UPDATE users 
        SET subscription_type = ?,
            subscription_start = datetime('now'),
            subscription_end = ?
        WHERE user_id = ?
        ''', (plan, subscription_end.strftime('%Y-%m-%d %H:%M:%S'), user_id))
        
        update_payment_status(request_id, 'approved')
        conn.commit()
        
        # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®
        context.bot.send_message(
            chat_id=user_id,
            text=f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ {plan} ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü‡¶ø‡¶≠‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! "
                 f"{subscription_end.strftime('%Y-%m-%d %H:%M:%S')} ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§"
        )
        
        query.edit_message_text(
            text=f"‚úÖ Approved: {full_name} ‡¶è‡¶∞ {plan} ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶®\n"
                 f"User ID: {user_id}\n"
                 f"Username: @{username}"
        )
    
    elif action == 'cancel':
        update_payment_status(request_id, 'cancelled')
        conn.commit()
        
        # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®
        context.bot.send_message(
            chat_id=user_id,
            text=f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ {plan} ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§"
        )
        
        query.edit_message_text(
            text=f"‚ùå Cancelled: {full_name} ‡¶è‡¶∞ {plan} ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶®\n"
                 f"User ID: {user_id}\n"
                 f"Username: @{username}"
        )
    
    conn.close()

def main():
    # ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®
    init_db()
    
    # ‡¶Ü‡¶™‡¶°‡ßá‡¶ü‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
    updater = Updater(BOT_TOKEN)
    dispatcher = updater.dispatcher
    
    # ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(CallbackQueryHandler(button_handler, pattern='^(free_trial|1_day|7_day|15_day|30_day)$'))
    dispatcher.add_handler(CallbackQueryHandler(admin_action_handler, pattern='^(approve|cancel)_\d+$'))
    
    # ‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
    updater.start_polling()
    logger.info("Bot started and polling...")
    updater.idle()

if __name__ == '__main__':
    main()
