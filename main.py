import os
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters
import logging
import pytz

# рж▓ржЧрж┐ржВ ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# ржбрж╛ржЯрж╛ржмрзЗрж╕ рж╣рж┐рж╕рж╛ржмрзЗ ржПржХржЯрж┐ ржбрж┐ржХрж╢ржирж╛рж░рж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ (ржкрзНрж░рзЛржбрж╛ржХрж╢ржирзЗ ржбрж╛ржЯрж╛ржмрзЗрж╕ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи)
users_db = {}
free_trial_used = set()
ADMIN_CHAT_ID = "6165060012"  # ржПржбржорж┐ржирзЗрж░ ржЪрзНржпрж╛ржЯ ржЖржЗржбрж┐ ржПржЦрж╛ржирзЗ рж╕рзЗржЯ ржХрж░рзБржи

# ржмржЯ ржЯрзЛржХрзЗржи (Render ржП environment variable ржерзЗржХрзЗ ржирзЗржмрзЗ)
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# ржкрзНрж▓рзНржпрж╛ржирзЗрж░ ржбрзЗржЯрж╛
PLANS = {
    '1h': {'duration': timedelta(hours=1), 'price': 0, 'text': '1 Hour - Free ЁЯМ╕'},
    '1d': {'duration': timedelta(days=1), 'price': 2, 'text': '1 Day - 2$'},
    '7d': {'duration': timedelta(days=7), 'price': 10, 'text': '7 Day - 10$'},
    '15d': {'duration': timedelta(days=15), 'price': 15, 'text': '15 Day - 15$'},
    '30d': {'duration': timedelta(days=30), 'price': 20, 'text': '30 Day - 20$'}
}

# рж╕рзНржЯрж╛рж░рзНржЯ ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    user_id = str(user.id)
    
    # ржЗржЙржЬрж╛рж░ ржбрж╛ржЯрж╛ржмрзЗрж╕рзЗ ржЖржЫрзЗ ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рзБржи
    if user_id in users_db and users_db[user_id]['subscription_end'] > datetime.now(pytz.utc):
        # рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи рж╕ржХрзНрж░рж┐ржпрж╝ ржЖржЫрзЗ
        update.message.reply_text(
            f'рж╕рзНржмрж╛ржЧрждржо {user.full_name} ржЖржкржирж╛рж░ Subscription ржЪрж╛рж▓рзБ ржЖржЫрзЗ ржЯрзЛржХрзЗржи ржжрж┐рзЯрзЗ Login ржХрж░рзБржи\n'
            'Login ржХрж░рждрзЗ /Login ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи'
        )
    else:
        # рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи рж╕ржХрзНрж░рж┐ржпрж╝ ржирзЗржЗ
        keyboard = [
            [
                InlineKeyboardButton(PLANS['1h']['text'], callback_data='plan_1h'),
                InlineKeyboardButton(PLANS['1d']['text'], callback_data='plan_1d')
            ],
            [
                InlineKeyboardButton(PLANS['7d']['text'], callback_data='plan_7d'),
                InlineKeyboardButton(PLANS['15d']['text'], callback_data='plan_15d')
            ],
            [
                InlineKeyboardButton(PLANS['30d']['text'], callback_data='plan_30d')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(
            'ржЖржкржирж╛рж░ Subscriptions ржЪрж╛рж▓рзБ ржирзЗржЗ тЩ╗я╕П\n'
            'ржЪрж╛рж▓рзБ ржХрж░рж╛рж░ ржЬржирзНржп ржирж┐ржЪрзЗрж░ Subscription Choose ржХрж░рзБржи тЬЕ',
            reply_markup=reply_markup
        )

# ржХрзНржпрж╛рж▓ржмрзНржпрж╛ржХ ржХрзБржпрж╝рзЗрж░рж┐ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (ржмрж╛ржЯржи ржХрзНрж▓рж┐ржХ)
def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    user = update.effective_user
    user_id = str(user.id)
    
    if query.data.startswith('plan_'):
        plan_key = query.data.split('_')[1]
        plan = PLANS[plan_key]
        
        # ржлрзНрж░рж┐ ржЯрзНрж░рж╛ржпрж╝рж╛рж▓ ржЪрзЗржХ
        if plan_key == '1h' and user_id in free_trial_used:
            query.edit_message_text(text='ржЖржкржирж┐ ржЗрждрж┐ржоржзрзНржпрзЗ ржлрзНрж░рж┐ ржЯрзНрж░рж╛ржпрж╝рж╛рж▓ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржЫрзЗржиред ржЕржирзНржп ржкрзНрж▓рзНржпрж╛ржи ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржиред')
            return
        
        # ржлрзНрж░рж┐ ржкрзНрж▓рзНржпрж╛ржи рж╣рж▓рзЗ рж╕рж░рж╛рж╕рж░рж┐ ржЕрзНржпрж╛ржХрзНржЯрж┐ржнрзЗржЯ ржХрж░рзБржи
        if plan_key == '1h':
            # ржлрзНрж░рж┐ ржЯрзНрж░рж╛ржпрж╝рж╛рж▓ ржорж╛рж░рзНржХ ржХрж░рзБржи
            free_trial_used.add(user_id)
            
            # рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржЕрзНржпрж╛ржХрзНржЯрж┐ржнрзЗржЯ ржХрж░рзБржи
            subscription_end = datetime.now(pytz.utc) + plan['duration']
            users_db[user_id] = {
                'name': user.full_name,
                'username': user.username,
                'subscription_end': subscription_end,
                'plan': plan_key
            }
            
            query.edit_message_text(text=f'ржЖржкржирж╛рж░ рзз ржШржирзНржЯрж╛рж░ ржлрзНрж░рж┐ ржЯрзНрж░рж╛ржпрж╝рж╛рж▓ рж╕ржХрзНрж░рж┐ржпрж╝ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ! ржПржЯрж┐ {subscription_end} ржП рж╢рзЗрж╖ рж╣ржмрзЗред')
            return
        
        # ржкрзЗржЗржб ржкрзНрж▓рзНржпрж╛ржирзЗрж░ ржЬржирзНржп ржкрзЗржорзЗржирзНржЯ рждржерзНржп ржкрж╛ржарж╛ржи
        payment_message = (
            f'Please send ${plan["price"]} to Binance Pay ID:\n'
            'ржкрзЗржорзЗржирзНржЯ ржХрж░рзЗ ржкрзНрж░ржорж╛ржи рж╣рж┐рж╕рж╛ржмрзЗ Admin ржПрж░ ржХрж╛ржЫрзЗ рж╕рзНржХрж┐ржирж╢рж░рзНржЯ ржЕржержмрж╛ transaction ID ржжрж┐ржи @Mr_Evan3490\n\n'
            f'Your payment details:\n'
            f'тЭДя╕П Name : {user.full_name}\n'
            f'ЁЯЖФ User ID: `{user.id}`\n'
            f'ЁЯСд Username: @{user.username}\n'
            f'ЁЯУЛ Plan: {plan["text"]}\n'
            f'ЁЯТ░ Amount: ${plan["price"]}'
        )
        
        query.edit_message_text(text=payment_message, parse_mode='Markdown')
        
        # ржПржбржорж┐ржиржХрзЗ ржирзЛржЯрж┐ржлрж╛ржЗ ржХрж░рзБржи
        admin_keyboard = [
            [
                InlineKeyboardButton("Approve тЬЕ", callback_data=f'approve_{user_id}_{plan_key}'),
                InlineKeyboardButton("Cancel тЭМ", callback_data=f'cancel_{user_id}')
            ]
        ]
        admin_reply_markup = InlineKeyboardMarkup(admin_keyboard)
        
        context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=(
                f'{user.full_name} {plan["text"]} рж╕ржорзЯрзЗрж░ ржЬржирзНржп Subscription ржирж┐рждрзЗ ржЪрж╛ржЪрзНржЫрзЗред\n\n'
                f'ЁЯФЖ User Name : {user.full_name}\n'
                f'ЁЯФЖ User ID : {user.id}\n'
                f'ЁЯФЖ Username : @{user.username}'
            ),
            reply_markup=admin_reply_markup
        )
    
    elif query.data.startswith('approve_'):
        # ржПржбржорж┐ржи ржЕрзНржпрж╛ржкрзНрж░рзБржн ржХрж░рж▓рзЗ
        _, user_id, plan_key = query.data.split('_')
        plan = PLANS[plan_key]
        
        # рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржЕрзНржпрж╛ржХрзНржЯрж┐ржнрзЗржЯ ржХрж░рзБржи
        subscription_end = datetime.now(pytz.utc) + plan['duration']
        users_db[user_id] = {
            'name': users_db.get(user_id, {}).get('name', ''),
            'username': users_db.get(user_id, {}).get('username', ''),
            'subscription_end': subscription_end,
            'plan': plan_key
        }
        
        # ржПржбржорж┐ржиржХрзЗ ржХржиржлрж╛рж░рзНржорзЗрж╢ржи ржкрж╛ржарж╛ржи
        query.edit_message_text(text=f'Subscription approved for user {user_id}')
        
        # ржЗржЙржЬрж╛рж░ржХрзЗ ржирзЛржЯрж┐ржлрж╛ржЗ ржХрж░рзБржи
        context.bot.send_message(
            chat_id=user_id,
            text=f'ржЖржкржирж╛рж░ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи рж╕ржХрзНрж░рж┐ржпрж╝ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ! ржПржЯрж┐ {subscription_end} ржП рж╢рзЗрж╖ рж╣ржмрзЗред'
        )
    
    elif query.data.startswith('cancel_'):
        # ржПржбржорж┐ржи ржХрзНржпрж╛ржирзНрж╕рзЗрж▓ ржХрж░рж▓рзЗ
        _, user_id = query.data.split('_')
        
        # ржПржбржорж┐ржиржХрзЗ ржХржиржлрж╛рж░рзНржорзЗрж╢ржи ржкрж╛ржарж╛ржи
        query.edit_message_text(text=f'Subscription request canceled for user {user_id}')
        
        # ржЗржЙржЬрж╛рж░ржХрзЗ ржирзЛржЯрж┐ржлрж╛ржЗ ржХрж░рзБржи
        context.bot.send_message(
            chat_id=user_id,
            text='ржЖржкржирж╛рж░ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред'
        )

# ржПрж░рж░ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
def error(update: Update, context: CallbackContext) -> None:
    logger.warning('Update "%s" caused error "%s"', update, context.error)

# ржорзЗржЗржи ржлрж╛ржВрж╢ржи
def main() -> None:
    # ржЖржкржбрзЗржЯрж╛рж░ рждрзИрж░рж┐ ржХрж░рзБржи ржПржмржВ ржбрж┐рж╕ржкрзНржпрж╛ржЪрж╛рж░рзЗ ржпрзЛржЧ ржХрж░рзБржи
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(button))
    
    # рж▓ржЧ рж╕ржм errors
    dispatcher.add_error_handler(error)

    # ржмржЯ рж╢рзБрж░рзБ ржХрж░рзБржи
    updater.start_polling()
    
    # ржмржЯ ржЪрж╛рж▓рзБ рж░рж╛ржЦрзБржи Ctrl+C ржкрж░рзНржпржирзНржд
    updater.idle()

if __name__ == '__main__':
    main()
